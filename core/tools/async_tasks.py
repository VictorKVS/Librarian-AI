# core/tools/async_tasks.py

from celery import Celery
from celery.result import AsyncResult
import logging
from typing import Dict, Any
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Celery —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis
celery_app = Celery(
    __name__,
    broker="redis://localhost:6379/0",
    backend="redis://localhost:6379/1",
)

celery_app.conf.update(
    task_serializer='json',
    result_serializer='json',
    accept_content=['json'],
    task_track_started=True,
    task_time_limit=300,
    worker_prefetch_multiplier=1,
)

class DocumentProcessingError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    pass

@celery_app.task(bind=True, name="document_processing")
def process_document_async(self, doc_id: str) -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID (–∏–ª–∏ –ø—É—Ç–∏).
    """

    logs = []
    started_at = datetime.utcnow().isoformat()

    try:
        def log(stage: str, progress: float):
            logs.append(stage)
            self.update_state(state='PROGRESS', meta={
                "stage": stage,
                "progress": progress,
                "logs": logs,
                "started_at": started_at
            })
            logger.info(f"[{doc_id}] {stage}")

        # –ü–∞–π–ø–ª–∞–π–Ω
        log("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞", 0.1)
        # document = DocumentLoader.load(doc_id)

        log("üßπ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", 0.2)
        # processed_text = TextPreprocessor.process(document)

        log("‚úÇÔ∏è –ß–∞–Ω–∫–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", 0.4)
        # chunks = TextChunker.chunk(processed_text)

        log("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", 0.6)
        # embeddings = EmbeddingGenerator.generate(chunks)

        log("üß† –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 0.8)
        # annotations = AnnotationGenerator.annotate(embeddings)

        log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 0.95)
        # StorageService.save_results(doc_id, embeddings, annotations)

        finished_at = datetime.utcnow().isoformat()

        return {
            "status": "done",
            "doc_id": doc_id,
            "progress": 1.0,
            "started_at": started_at,
            "finished_at": finished_at,
            "logs": logs
        }

    except Exception as e:
        error_msg = f"[{doc_id}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        logger.error(error_msg, exc_info=True)
        logs.append(error_msg)
        self.update_state(state='FAILURE', meta={
            "error": error_msg,
            "progress": 0.0,
            "logs": logs,
            "started_at": started_at
        })
        raise DocumentProcessingError(error_msg) from e


def get_task_status(task_id: str) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Celery-–∑–∞–¥–∞—á–∏ –ø–æ task_id.
    """
    result = AsyncResult(task_id, app=celery_app)

    status = {
        "task_id": task_id,
        "status": result.status,
        "result": result.result
    }

    if result.status == 'PROGRESS':
        status.update(result.info or {})
    elif result.status == 'FAILURE':
        status["error"] = str(result.info)

    return status


def cancel_task(task_id: str) -> Dict[str, Any]:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –µ—ë ID.
    """
    try:
        result = AsyncResult(task_id, app=celery_app)
        result.revoke(terminate=True)
        logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é")
        return {
            "task_id": task_id,
            "success": True,
            "message": "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")
        return {
            "task_id": task_id,
            "success": False,
            "message": f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {str(e)}"
        }
