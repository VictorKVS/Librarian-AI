# üìÑ –§–∞–π–ª: graph_tools.py
# üìÇ –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: librarian_ai/core/graph_tools.py

 """6. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞:
detect_communities(graph): –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ (–∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è) —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ Louvain, Girvan-Newman –∏ –¥—Ä.

rank_entities(graph, method='pagerank'): –æ—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —É–∑–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PageRank, Centrality.

üåê 7. –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
geo_enrich(graph): –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫ LOCATION-—Å—É—â–Ω–æ—Å—Ç—è–º (—á–µ—Ä–µ–∑ GeoNames, Nominatim).

export_geojson(graph): —ç–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç GeoJSON.

üìä 8. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π:
graph_to_dataframe(graph): –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ pandas.DataFrame –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

generate_html_report(graph): –æ—Ç—á—ë—Ç –ø–æ –≥—Ä–∞—Ñ—É (HTML+JS –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è + —Ç–∞–±–ª–∏—Ü—ã).

generate_pdf_summary(graph): —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ PDF-–æ—Ç—á–µ—Ç–∞ —Å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—É—â–Ω–æ—Å—Ç–µ–π.

üß† 9. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM:
explain_entity_links(graph, model): –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏.

suggest_graph_edits(graph, model): –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ—á–∏—Å—Ç–∫–µ/–æ–±–æ–≥–∞—â–µ–Ω–∏—é –≥—Ä–∞—Ñ–∞.

üåê 10. Web-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ API:
serve_graph_dashboard(graph): –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ Dash/Streamlit.

REST API (FastAPI): –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ ‚Üí –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç.

üí° –ß—Ç–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º?
–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏ —è —Ä–µ–∞–ª–∏–∑—É—é –µ–≥–æ:

 detect_communities(graph) ‚Äî –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É–∑–ª–æ–≤

 rank_entities(graph) ‚Äî –≤–∞–∂–Ω–æ—Å—Ç—å —Å—É—â–Ω–æ—Å—Ç–µ–π

 graph_to_dataframe(graph) ‚Äî –≤ Pandas

 export_geojson(graph) ‚Äî –∫–∞—Ä—Ç—ã

 generate_html_report(graph) ‚Äî –æ—Ç—á—ë—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π

 serve_graph_dashboard(graph) ‚Äî web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""""





import networkx as nx
import matplotlib.pyplot as plt
from typing import List, Dict, Optional
from entity_extractor import Entity
from collections import defaultdict

def build_entity_graph(entities: List[Entity]) -> nx.Graph:
    """
    –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    :param entities: –°–ø–∏—Å–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    :return: –ì—Ä–∞—Ñ NetworkX —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –∏ —Å–≤—è–∑—è–º–∏
    """
    G = nx.Graph()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    for i, entity in enumerate(entities):
        G.add_node(
            entity.text,
            label=entity.label,
            value=entity.value,
            confidence=entity.confidence
        )
    
    # –°—Ç—Ä–æ–∏–º —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_map = defaultdict(list)
    for entity in entities:
        if entity.context:
            context_map[entity.context].append(entity.text)
    
    for context, entity_texts in context_map.items():
        for i in range(len(entity_texts)):
            for j in range(i+1, len(entity_texts)):
                G.add_edge(
                    entity_texts[i], 
                    entity_texts[j],
                    context=context,
                    weight=1.0  # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence
                )
    
    return G

def trace_entity_paths(
    graph: nx.Graph, 
    source: str, 
    target: str,
    algorithm: str = 'dijkstra'
) -> List[str]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –≤ –≥—Ä–∞—Ñ–µ
    
    :param graph: –ì—Ä–∞—Ñ —Å—É—â–Ω–æ—Å—Ç–µ–π
    :param source: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å
    :param target: –¶–µ–ª–µ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å
    :param algorithm: –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ ('dijkstra', 'astar', 'bellman-ford')
    :return: –°–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å
    """
    if source not in graph or target not in graph:
        return []
    
    try:
        if algorithm == 'dijkstra':
            return nx.shortest_path(graph, source=source, target=target, weight='weight')
        elif algorithm == 'astar':
            return nx.astar_path(graph, source=source, target=target, weight='weight')
        elif algorithm == 'bellman-ford':
            return nx.bellman_ford_path(graph, source=source, target=target, weight='weight')
        else:
            return nx.shortest_path(graph, source=source, target=target)
    except nx.NetworkXNoPath:
        return []

def visualize_path(
    graph: nx.Graph,
    path: List[str],
    title: str = "Entity Path Visualization",
    filename: Optional[str] = None
):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    
    :param graph: –ò—Å—Ö–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ
    :param path: –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –ø—É—Ç–∏
    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
    :param filename: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª
    """
    plt.figure(figsize=(12, 8))
    
    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∑–ª–æ–≤
    pos = nx.spring_layout(graph, seed=42)
    
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∞
    nx.draw_networkx_nodes(graph, pos, node_size=300, node_color='lightblue')
    nx.draw_networkx_edges(graph, pos, alpha=0.2)
    nx.draw_networkx_labels(graph, pos, font_size=8)
    
    # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏
    if len(path) > 1:
        path_edges = list(zip(path[:-1], path[1:]))
        nx.draw_networkx_nodes(graph, pos, nodelist=path, node_size=500, node_color='red')
        nx.draw_networkx_edges(graph, pos, edgelist=path_edges, width=2, edge_color='red')
    
    plt.title(title)
    plt.axis('off')
    
    if filename:
        plt.savefig(filename, bbox_inches='tight', dpi=300)
        plt.close()
    else:
        plt.show()

def find_all_paths(
    graph: nx.Graph,
    source: str,
    target: str,
    cutoff: Optional[int] = None
) -> List[List[str]]:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    
    :param graph: –ì—Ä–∞—Ñ —Å—É—â–Ω–æ—Å—Ç–µ–π
    :param source: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å
    :param target: –¶–µ–ª–µ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å
    :param cutoff: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏
    :return: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
    """
    if source not in graph or target not in graph:
        return []
    
    try:
        return list(nx.all_simple_paths(graph, source=source, target=target, cutoff=cutoff))
    except nx.NetworkXNoPath:
        return []

def calculate_path_strength(graph: nx.Graph, path: List[str]) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–ª—É –ø—É—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤ —Ä–µ–±–µ—Ä
    
    :param graph: –ì—Ä–∞—Ñ —Å—É—â–Ω–æ—Å—Ç–µ–π
    :param path: –°–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –ø—É—Ç–∏
    :return: –û–±—â–∞—è —Å–∏–ª–∞ –ø—É—Ç–∏ (—Å—É–º–º–∞ –≤–µ—Å–æ–≤)
    """
    if len(path) < 2:
        return 0.0
    
    total_strength = 0.0
    for i in range(len(path)-1):
        edge_data = graph.get_edge_data(path[i], path[i+1])
        total_strength += edge_data.get('weight', 1.0)
    
    return total_strength / (len(path)-1)

def get_entity_connections(graph: nx.Graph, entity: str, depth: int = 1) -> Dict[str, List[str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
    
    :param graph: –ì—Ä–∞—Ñ —Å—É—â–Ω–æ—Å—Ç–µ–π
    :param entity: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å
    :param depth: –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π
    :return: –°–ª–æ–≤–∞—Ä—å {—É—Ä–æ–≤–µ–Ω—å: [—Å—É—â–Ω–æ—Å—Ç–∏]}
    """
    if entity not in graph:
        return {}
    
    connections = defaultdict(list)
    visited = set()
    queue = [(entity, 0)]
    
    while queue:
        current_entity, current_depth = queue.pop(0)
        
        if current_depth > depth:
            continue
            
        if current_entity in visited:
            continue
            
        visited.add(current_entity)
        connections[current_depth].append(current_entity)
        
        for neighbor in graph.neighbors(current_entity):
            if neighbor not in visited:
                queue.append((neighbor, current_depth + 1))
    
    return dict(connections)