# üìÑ –§–∞–π–ª: agent_cli.py
# üìÇ –ü—É—Ç—å: cli/
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ö–æ–º–∞–Ω–¥–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤, –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ —Å—É—â–Ω–æ—Å—Ç–µ–π

import argparse
import os
from core.loader import load_file_to_knowledge, parallel_load_files
from core.embedder import embed_chunks
from core.entity_extractor import extract_entities
from utils.file_utils import process_directory_recursively
from db.storage import session_scope
from db.models import KnowledgeDoc

# üß† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é LLM
from providers.mistral_local import MistralLocal

def process_file(path: str):
    print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {path}")
    docs = load_file_to_knowledge(path)
    docs = docs if isinstance(docs, list) else [docs]
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(docs)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞")

    for doc in docs:
        # üìå –≠–º–±–µ–¥–¥–∏–Ω–≥
        embed_chunks([doc])
        # üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
        with session_scope() as session:
            extract_entities(session, doc)

def process_folder(folder: str):
    print(f"üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {folder}")
    paths = process_directory_recursively(folder)
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(paths)} —Ñ–∞–π–ª–æ–≤")
    docs = parallel_load_files(paths)
    all_docs = [doc for d in docs for doc in (d if isinstance(d, list) else [d])]
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # üìå –≠–º–±–µ–¥–¥–∏–Ω–≥ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    embed_chunks(all_docs)
    with session_scope() as session:
        for doc in all_docs:
            extract_entities(session, doc)

def run_mistral_cli():
    print("üß† –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π LLM (Mistral)...")
    llm = MistralLocal()
    while True:
        prompt = input(">>> ")
        if prompt.lower() in ("exit", "quit"): break
        response = llm.generate(prompt)
        print(response)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–∞–ø–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫ LLM")
    parser.add_argument("--file", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É")
    parser.add_argument("--folder", type=str, help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    parser.add_argument("--llm", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é LLM Mistral")

    args = parser.parse_args()

    if args.llm:
        run_mistral_cli()
    elif args.file:
        process_file(args.file)
    elif args.folder:
        process_folder(args.folder)
    else:
        print("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ --file, --folder –∏–ª–∏ --llm")
