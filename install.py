# üìÑ –§–∞–π–ª: install.py | –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: librarian_ai/install.py
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Librarian AI ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤
# üì• –ü–æ–ª—É—á–∞–µ—Ç: —à–∞–±–ª–æ–Ω–Ω—ã–µ .tpl-—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ templates/
# üì§ –ü–µ—Ä–µ–¥–∞—ë—Ç: –≥–æ—Ç–æ–≤—ã–µ .py, .yaml –∏ .md —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
# ‚ö†Ô∏è –ü–∞–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ –≤—Ä—É—á–Ω—É—é

import os

file_templates = {
    "main.py": "templates/main.py.tpl",
    "config/config.yaml": "templates/config.yaml.tpl",
    "llm/base.py": "templates/base_llm.py.tpl",
    "core/loader.py": "templates/loader.py.tpl",
    "README.md": "templates/readme.md.tpl",
    "agents/osint_plus/agent.yaml": "# YAML-–æ–ø–∏—Å–∞–Ω–∏–µ OSINT –∞–≥–µ–Ω—Ç–∞\nname: osint_plus\nversion: 0.1\nrole: collector\n",
    "config/e_full.yaml": "# –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ Librarian AI –≤ —Ñ–æ—Ä–º–∞—Ç–µ AgentDNA\nname: librarian_ai\nversion: 0.3\nrole: document_librarian\ntags: [\"NLP\", \"RAG\", \"KnowledgeBase\"]\ndescription: |\n  –ê–≥–µ–Ω—Ç –¥–ª—è —É–∫–ª–∞–¥–∫–∏, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–±–æ—Ä–∞ –∑–Ω–∞–Ω–∏–π –∏ —Ä–∞–±–æ—Ç—ã —Å –ò–ò.\nauthor: Viktor Kulichenko\norganization: AgentFarm Systems\ncompatibility: [\"OSINT+\", \"GigaChat\", \"YandexGPT\"]\n"
}

for path, tpl_path in file_templates.items():
    full_path = f"librarian_ai/{path}"
    if not os.path.exists(full_path):
        if tpl_path.endswith(".tpl"):
            with open(f"librarian_ai/{tpl_path}", "r", encoding="utf-8") as tpl_file:
                content = tpl_file.read()
        else:
            content = tpl_path or ""
        with open(full_path, "w", encoding="utf-8") as f:
            f.write(content)

print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ Librarian AI —Å–æ–∑–¥–∞–Ω—ã.")
