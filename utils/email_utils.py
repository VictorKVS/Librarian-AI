# üìÑ –§–∞–π–ª: email_utils.py
# üìÇ –ü—É—Ç—å: utils/
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–∞—Ä—Å–µ—Ä—ã –ø–∏—Å–µ–º .eml, .msg, .mbox (–∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ 1)

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ ‚Äî –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
# üìÑ –§–∞–π–ª: email_utils.py
# üìÇ –ü—É—Ç—å: utils/
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –û–±—Ä–∞–±–æ—Ç–∫–∞ email-—Ñ–∞–π–ª–æ–≤ (.eml –∏ .msg), –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π

from email import policy
from email.parser import BytesParser
import extract_msg  # pip install extract-msg


def parse_email_eml(eml_path: str) -> dict:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ EML-—Ñ–∞–π–ª–∞: —Ç–µ–º–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Ç–µ–ª–æ, –≤–ª–æ–∂–µ–Ω–∏—è.
    """
    with open(eml_path, 'rb') as f:
        msg = BytesParser(policy=policy.default).parse(f)

    body = ""
    if msg.is_multipart():
        for part in msg.walk():
            content_type = part.get_content_type()
            if content_type == "text/plain":
                body += part.get_payload(decode=True).decode(errors='ignore')
    else:
        body = msg.get_payload(decode=True).decode(errors='ignore')

    attachments = [
        part.get_filename()
        for part in msg.walk()
        if part.get_filename() is not None
    ]

    return {
        "subject": msg['subject'],
        "from": msg['from'],
        "to": msg['to'],
        "body": body.strip(),
        "attachments": attachments
    }


def parse_email_msg(msg_path: str) -> dict:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ Outlook .msg-—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é extract_msg
    """
    msg = extract_msg.Message(msg_path)
    msg.process()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π

    attachments = [att.longFilename or att.shortFilename for att in msg.attachments]

    return {
        "subject": msg.subject,
        "from": msg.sender,
        "to": msg.to,
        "body": msg.body.strip() if msg.body else "",
        "attachments": attachments
    }