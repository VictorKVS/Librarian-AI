"""
Librarian-AI üß† ‚Äî –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É AdvancedApplication.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
‚îú‚îÄ‚îÄ api/                         # API-–º–∞—Ä—à—Ä—É—Ç—ã
‚îú‚îÄ‚îÄ core/                        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —è–¥—Ä–æ
‚îú‚îÄ‚îÄ tools/                       # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≥—Ä–∞—Ñ—ã, NER –∏ –¥—Ä.
‚îú‚îÄ‚îÄ llm/                         # –û–±—ë—Ä—Ç–∫–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ã LLM
‚îú‚îÄ‚îÄ providers/                  # –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–¥–µ–ª–µ–π LLM
‚îú‚îÄ‚îÄ .env                         # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
‚îú‚îÄ‚îÄ librarian_ai.py              # üß† –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ (—ç—Ç–æ—Ç —Ñ–∞–π–ª)
"""

import asyncio
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
from api.files import router as file_router
from api.email import router as email_router
from api.routers.summary import router as summary_router
from api.routers.docs import router as docs_router
from core.config import settings
from core.advanced_architecture import AdvancedApplication

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (FastAPI + Telegram —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä)
app_instance = AdvancedApplication()
app: FastAPI = app_instance.rest_adapter.app
app.title = "Libra Document Processor"

# Middleware: —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (CORS)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –†–æ—É—Ç—ã API
app.include_router(file_router, prefix="/files", tags=["üìÅ Files"])
app.include_router(email_router, prefix="/email", tags=["üì® Email"])
app.include_router(summary_router, prefix="/summary", tags=["üìÑ Summaries"])
app.include_router(docs_router, prefix="/documents", tags=["üìö Documents"])

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def root():
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Libra Document Processor üéì",
        "docs": "/docs",
        "files_upload": "/files/upload/",
        "summary": "/summary",
        "documents": "/documents",
        "email_upload": "/email/upload/"
    }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@app.get("/healthz")
def health_check():
    return {"status": "ok", "service": "Libra", "version": settings.VERSION}

# –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    asyncio.run(app_instance.start())
