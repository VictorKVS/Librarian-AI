# –í–µ—Ä—Å–∏—è v2.0 (Final)

# üìÑ tasks/document_processor.py

from celery import Celery
from core.document_processor import DocumentProcessor
from config import settings
import logging
from celery.signals import after_setup_logger

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Celery
celery_app = Celery(
    "document_processor",
    broker=settings.CELERY_BROKER_URL,
    backend=settings.CELERY_RESULT_BACKEND,
    broker_connection_retry_on_startup=True
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update({
    'task_serializer': 'json',
    'result_serializer': 'json',
    'accept_content': ['json'],
    'task_acks_late': True,
    'task_reject_on_worker_lost': True,
    'task_track_started': True,
    'worker_prefetch_multiplier': 1,
    'broker_transport_options': {
        'visibility_timeout': 3600,
        'fanout_prefix': True
    }
})

@after_setup_logger.connect
def setup_loggers(logger, *args, **kwargs):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Celery"""
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler = logging.FileHandler(settings.CELERY_LOG_PATH)
    handler.setFormatter(formatter)
    logger.addHandler(handler)

@celery_app.task(
    bind=True,
    name="process_document",
    autoretry_for=(Exception,),
    retry_backoff=5,
    retry_backoff_max=60,
    retry_kwargs={'max_retries': 3},
    time_limit=300,
    soft_time_limit=240
)
def process_document_task(self, file_data: dict):
    """–ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        processor = DocumentProcessor()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        result = processor.process_document(
            chunks=file_data['chunks'],
            source_path=file_data['source_path'],
            session_id=file_data['session_id'],
            extract_params=file_data['extract_params']
        )
        
        return {
            'status': 'SUCCESS',
            'result': {
                'embeddings': [emb.tolist() for emb, _ in result[0]],
                'entities': [ent.to_dict() for ent in result[1]]
            }
        }
    except Exception as e:
        logger.error(f"Task failed: {str(e)}", exc_info=True)
        raise self.retry(exc=e)

# üìÑ api/async_router.py

from fastapi import APIRouter, UploadFile, File, HTTPException, Depends, status
from fastapi.responses import JSONResponse
from tasks.document_processor import process_document_task
from models.schemas import AsyncTaskResponse, ErrorResponse
from config import settings
from uuid import uuid4
import aiofiles
import os
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

router = APIRouter(
    prefix="/api/v2/documents",
    tags=["Async Document Processing"],
    responses={404: {"model": ErrorResponse, "description": "Not found"}}
)

@router.post(
    "/async-process",
    response_model=AsyncTaskResponse,
    status_code=status.HTTP_202_ACCEPTED,
    summary="Async document processing",
    description="Submit document for background processing"
)
async def async_process_document(
    file: UploadFile = File(...),
    min_confidence: float = 0.7,
    chunk_size: int = 1000,
    filters: Optional[List[str]] = None
):
    """Endpoint –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_path = f"{settings.TEMP_DIR}/{uuid4()}_{file.filename}"
        async with aiofiles.open(file_path, 'wb') as out_file:
            content = await file.read()
            await out_file.write(content)
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
        text = await extract_text(file_path)
        os.unlink(file_path)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏
        task_data = {
            'chunks': split_into_chunks(text, chunk_size),
            'source_path': file.filename,
            'session_id': str(uuid4()),
            'extract_params': {
                'min_confidence': min_confidence,
                'filters': filters
            }
        }
        
        # –ó–∞–ø—É—Å–∫ Celery –∑–∞–¥–∞—á–∏
        task = process_document_task.delay(task_data)
        
        return AsyncTaskResponse(
            task_id=task.id,
            status_url=f"/api/v2/tasks/{task.id}",
            monitor_url=f"{settings.FLOWER_URL}/task/{task.id}"
        )
        
    except Exception as e:
        logger.error(f"Async processing failed: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail="Failed to submit processing task"
        )
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

# üìÑ config.py

from pydantic import BaseSettings

class Settings(BaseSettings):
    # Celery –∏ Redis
    CELERY_BROKER_URL: str = "redis://redis:6379/0"
    CELERY_RESULT_BACKEND: str = "redis://redis:6379/1"
    CELERY_LOG_PATH: str = "/var/log/celery.log"
    FLOWER_URL: str = "http://flower:5555"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
    CELERY_WORKERS: int = 4
    CELERY_MAX_TASKS_PER_CHILD: int = 100
    CELERY_TASK_TIME_LIMIT: int = 300
Docker Compose –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

# üìÑ docker-compose.yml

version: '3.8'

services:
  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  flower:
    image: mher/flower:0.9.7
    ports:
      - "5555:5555"
    command: ["celery", "flower", "--broker=redis://redis:6379/0"]
    depends_on:
      - redis

  worker:
    build: .
    command: celery -A tasks.document_processor worker --loglevel=info --concurrency=${CELERY_WORKERS:-4}
    volumes:
      - .:/app
      - celery_logs:/var/log
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    depends_on:
      - redis
      - flower

  api:
    build: .
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      - redis
      - worker

volumes:
  redis_data:
  celery_logs:
–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ v2.0:
Celery Queue:
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è.
–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–æ—Ä–∫–µ—Ä–∞–º–∏.
Redis Storage:
–ë—ã—Å—Ç—Ä–æ–µ –∏ –Ω–∞–¥—ë–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á.
–ì–∏–±–∫–æ—Å—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:
–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ Redis-—Å–µ—Ä–≤–µ—Ä–æ–≤.
–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Ä–æ—Å—Ç —á–∏—Å–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤ –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ API-—Å–µ—Ä–≤–∏—Å.
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
Flower's Web UI –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–¥–∞—á –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∞—É–¥–∏—Ç–∞.
–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ TLS –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±—Ä–æ–∫–µ—Ä–æ–º Redis.
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–µ—Å—É—Ä—Å–∞–º.
–í—ã—Å–æ–∫–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å:
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –∑–∞–¥–∞—á —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
–¢–æ—á–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
–ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —à—Ç—Ä–∏—Ö–∏:
–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —É–∑–ª—ã (–≤–æ—Ä–∫–µ—Ä—ã) –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Flower's –∞–ª–µ—Ä—Ç—ã –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –¥–æ–ª–≥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á.
–†–µ–≥—É–ª—è—Ä–Ω–æ –æ—á–∏—â–∞–π—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Redis –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞.
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Å—Ç—ç–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Celery –∏ Redis. –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –æ–±–µ—Å–ø–µ—á–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö