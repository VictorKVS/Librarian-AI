# üìÑ –§–∞–π–ª: files.py
# üìÇ –ü—É—Ç—å: api/
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ FastAPI

# üìÑ –§–∞–π–ª: api/files.py
# üìå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤

from fastapi import APIRouter, UploadFile, File, HTTPException, status, Depends
from typing import List
import os
import logging
import aiofiles
import tempfile
import asyncio
from starlette.responses import JSONResponse

from core.tools.loader import create_file_loader
from core.parser.chunker import TextChunker

# from auth.dependencies import get_current_user  # üîê –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ JWT

logger = logging.getLogger(__name__)
router = APIRouter()

# üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
chunker = TextChunker()
loader = create_file_loader(chunker)

# üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
ALLOWED_MIME_TYPES = {
    'application/pdf',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'text/plain',
    'application/zip',
    'application/x-tar',
    'application/x-rar-compressed'
}
MAX_FILE_SIZE_MB = 50


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
async def validate_file(file: UploadFile):
    if file.content_type not in ALLOWED_MIME_TYPES:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π MIME-—Ç–∏–ø: {file.content_type}")

    await file.seek(0, os.SEEK_END)
    size = file.tell()
    if size > MAX_FILE_SIZE_MB * 1024 * 1024:
        raise HTTPException(status_code=400, detail=f"–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size // 1024} KB")
    await file.seek(0)


# ‚úÖ –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
@router.post("/upload/", status_code=status.HTTP_200_OK)
async def upload_file(file: UploadFile = File(...)):
    await validate_file(file)
    suffix = os.path.splitext(file.filename)[1]

    with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as tmp:
        async with aiofiles.open(tmp.name, 'wb') as out:
            content = await file.read()
            await out.write(content)
        tmp_path = tmp.name

    try:
        result = await loader.load_file(tmp_path)
        return {
            "filename": file.filename,
            "chunk_count": len(result.chunks),
            "language": result.metadata.language,
            "size_kb": result.metadata.size // 1024,
            "mime_type": result.metadata.mime_type,
            "processing_time": round(result.processing_time, 2),
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")
    finally:
        os.unlink(tmp_path)


# ‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
@router.post("/upload/batch/", status_code=status.HTTP_200_OK)
async def upload_batch(files: List[UploadFile] = File(...)):
    async def process_one(file: UploadFile):
        await validate_file(file)
        suffix = os.path.splitext(file.filename)[1]

        with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as tmp:
            async with aiofiles.open(tmp.name, 'wb') as out:
                content = await file.read()
                await out.write(content)
            tmp_path = tmp.name

        try:
            result = await loader.load_file(tmp_path)
            return {
                "filename": file.filename,
                "chunk_count": len(result.chunks),
                "language": result.metadata.language,
                "size_kb": result.metadata.size // 1024,
                "mime_type": result.metadata.mime_type,
                "processing_time": round(result.processing_time, 2),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}", exc_info=True)
            return {
                "filename": file.filename,
                "error": str(e)
            }
        finally:
            os.unlink(tmp_path)

    results = await asyncio.gather(*(process_one(file) for file in files))
    return {
        "files_processed": len(results),
        "details": results
    }


# ‚úÖ –ü–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
@router.post("/upload/stream/", status_code=status.HTTP_200_OK)
async def upload_stream_file(file: UploadFile = File(...)):
    await validate_file(file)
    suffix = os.path.splitext(file.filename)[1]

    with tempfile.NamedTemporaryFile(suffix=suffix, delete=False) as tmp:
        async with aiofiles.open(tmp.name, 'wb') as out:
            while chunk := await file.read(1024 * 1024):  # —á–∏—Ç–∞–µ–º –ø–æ 1 –ú–ë
                await out.write(chunk)
        tmp_path = tmp.name

    try:
        result = await loader.load_file(tmp_path)
        return {
            "filename": file.filename,
            "chunk_count": len(result.chunks),
            "language": result.metadata.language,
            "size_kb": result.metadata.size // 1024,
            "mime_type": result.metadata.mime_type,
            "processing_time": round(result.processing_time, 2),
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ {file.filename}: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞")
    finally:
        os.unlink(tmp_path)


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
@router.get("/check/{filename}", status_code=status.HTTP_200_OK)
async def check_file_compatibility(filename: str):
    _, ext = os.path.splitext(filename.lower())
    compatible = ext in ['.pdf', '.docx', '.xlsx', '.txt', '.zip', '.tar', '.rar']
    return JSONResponse({"compatible": compatible})