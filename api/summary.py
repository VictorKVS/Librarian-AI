# üìÇ api/summary.py
from fastapi import APIRouter, HTTPException, Request
from pydantic import BaseModel, Field
from typing import Optional, Literal
from core.summary_generator import UniversalSummaryGenerator, SummaryConfig
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

router = APIRouter(
    prefix="/api/v1",
    tags=["summary"],
    responses={404: {"description": "Not found"}}
)

generator = UniversalSummaryGenerator()

# –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
class SummaryRequest(BaseModel):
    text: str = Field(..., min_length=50, max_length=100000, example="–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
    language: str = Field("ru", regex="^[a-z]{2}$", example="ru")
    custom_role: Optional[str] = Field(
        None, 
        min_length=3, 
        example="Game Designer",
        description="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –±—É–¥–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
    )
    length: Literal['short', 'medium', 'long'] = Field("medium", example="medium")
    style: Literal['academic', 'professional', 'casual'] = Field("professional", example="professional")

class SummaryResponse(BaseModel):
    content_type: str
    language: str
    suggested_roles: list[str]
    summaries: dict[str, str]
    processing_time_ms: int

@router.post(
    "/summary",
    response_model=SummaryResponse,
    summary="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ summary",
    description="""–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç summaries –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 48 —è–∑—ã–∫–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏.""",
    response_description="–°–ª–æ–≤–∞—Ä—å —Å summary –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏"
)
async def generate_summary(
    request: SummaryRequest,
    http_request: Request
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ summaries —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é:
    - –ê–≤—Ç–æ–≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    - –†—É—á–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª–∏–Ω—ã –∏ —Å—Ç–∏–ª—è
    """
    start_time = datetime.now()
    client_ip = http_request.client.host
    
    try:
        logger.info(f"Request from {client_ip} | Language: {request.language} | Chars: {len(request.text)}")
        
        config = SummaryConfig(
            length=request.length,
            style=request.style
        )
        
        result = generator.generate_summary(
            text=request.text,
            language=request.language,
            config=config,
            custom_role=request.custom_role
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        processing_time = (datetime.now() - start_time).total_seconds() * 1000
        response = {
            **result,
            "processing_time_ms": int(processing_time)
        }
        
        logger.info(f"Success | Roles: {len(result['summaries'])} | Time: {processing_time:.0f}ms")
        
        return response
        
    except ValueError as e:
        logger.error(f"Validation error: {str(e)}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.critical(f"Processing failed: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Internal server error. Contact support."
        )

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è Swagger
@router.get("/examples", include_in_schema=False)
async def get_examples():
    return {
        "legal": {
            "text": "–°—Ç–∞—Ç—å—è 128 –£–ö –†–§ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç...",
            "language": "ru",
            "length": "medium"
        },
        "tech": {
            "text": "Python 3.12 introduces new typing features...",
            "custom_role": "Software Engineer",
            "style": "academic"
        }
    }