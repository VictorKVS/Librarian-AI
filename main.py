import asyncio
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.api.files import router as file_router
from app.api.email import router as email_router
from app.api.routers.summary import router as summary_router
from app.api.routers.docs import router as docs_router
from app.core.config import settings
from app.core.advanced_architecture import AdvancedApplication

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—é—â–µ–≥–æ FastAPI –∏ Telegram
app_instance = AdvancedApplication()
app = app_instance.rest_adapter.app  # FastAPI instance
app.title = "Libra Document Processor"

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.include_router(file_router, prefix="/files", tags=["üìÅ Files"])
app.include_router(email_router, prefix="/email", tags=["üì® Email"])
app.include_router(summary_router, prefix="/summary", tags=["üìÑ Summaries"])
app.include_router(docs_router, prefix="/documents", tags=["documents"])

# –ë–∞–∑–æ–≤—ã–π endpoint
@app.get("/")
async def root():
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Libra Document Processor üéì",
        "docs": "/docs",
        "files_upload": "/files/upload/",
        "summary": "/summary",
        "documents": "/documents",
        "email_upload": "/email/upload/"
    }

# Health check
@app.get("/healthz")
def health_check():
    return {"status": "ok", "service": "Libra", "version": settings.VERSION}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (FastAPI + Telegram)
if __name__ == "__main__":
    asyncio.run(app_instance.start())